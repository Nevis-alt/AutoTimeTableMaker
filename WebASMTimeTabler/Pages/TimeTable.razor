    @page "/timetable"
    @using WebASMTimeTabler.Core
    @using CoreDay = WebASMTimeTabler.Core.DayOfWeek
    @inject ScheduleStateService StateService

    <PageTitle>시간표</PageTitle>


    <div class="d-flex gap-4">
        <!-- 좌측: 필터 패널 -->
        <div class="card p-3" style="width: 300px;">
            <h5>필터 설정</h5>
            
            <div class="form-check">
                <input type="checkbox" class="form-check-input" @bind="useLunchBreak">
                <label class="form-check-label">점심시간 공강</label>
            </div>

            <div class="form-check">
                <input type="checkbox" class="form-check-input" @bind="useMorningFilter">
                <label class="form-check-label">아침수업 금지</label>
            </div>

            <div class="form-check">
                <input type="checkbox" class="form-check-input" @bind="useNoFriday">
                <label class="form-check-label">금요일 공강</label>
            </div>

            <button class="btn btn-primary mt-3" @onclick="GenerateSchedules">시간표 생성</button>
        </div>
        <!-- 우측: 시간표 결과 패널 -->
        <div class="flex-grow-1">
            @if (generatedSchedules.Count == 0 && loading)
            {
                <p><em>시간표 생성 중...</em></p>
            }
            else if (generatedSchedules.Count == 0 && !loading)
            {
                <p><em>조건에 맞는 시간표가 없습니다.</em></p>
            }
            else
            {
            @foreach (var (schedule, idx) in generatedSchedules.Select((s, i) => (s, i + 1)))
                {
                    <div class="card my-3 p-3">
                        <h5>시간표 @idx</h5>
                        <table class="table table-bordered text-center align-middle" style="width: 100%; table-layout: fixed;">
                            <thead class="table-light">
                                <tr>
                                    <th style="width: 80px;">시간</th>
                                    @foreach (var day in DaysOfWeek)
                                    {
                                        <th>@day</th>
                                    }
                                </tr>
                            </thead>
                            <tbody>
                                @for (int hour = StartHour; hour <= EndHour; hour++)
                                {
                                    <tr>
                                        <td>@(hour+7):00</td>
                                        @foreach (var day in DaysOfWeek)
                                        {
                                            var courseSlot = schedule
                                                .SelectMany(c => c.Times.Select(t => (Course: c, Time: t)))
                                                .FirstOrDefault(x => x.Time.day.ToString() == day && x.Time.start == hour);

                                            if (courseSlot.Course != null)
                                            {
                                                var color = GetCourseColor(courseSlot.Course.Name);

                                                <td rowspan="@(courseSlot.Time.end - courseSlot.Time.start + 1)" 
                                                    style="background-color:@color; color:white; font-weight:bold;">
                                                    @courseSlot.Course.Name <br />
                                                    <small>@courseSlot.Course.Professor</small>
                                                </td>
                                            }
                                            else if (!schedule.SelectMany(c => c.Times)
                                                            .Any(t => t.day.ToString() == day && t.start < hour && t.end >= hour))
                                            {
                                                <td></td>
                                            }
                                        }
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            }
        </div>
    </div>


    @code {
        private List<List<Course>> generatedSchedules = new();

        private static readonly string[] DaysOfWeek = { "월", "화", "수", "목", "금", "토" };
        private const int StartHour = 1;
        private const int EndHour = 17;
        private bool loading = false;
        
        private bool useLunchBreak = false;
        private bool useMorningFilter = false;
        private bool useNoFriday = false;

        // 랜덤 색상 저장용
        private Dictionary<string, string> courseColors = new();
        /*
        protected override async Task OnInitializedAsync()
        {
            var selected = StateService.SelectedCourses.ToList();
            if (selected.Any())
            {
                await foreach (var schedule in ScheduleService.GenerateSchedulesAsync(selected))
                {
                    generatedSchedules.Add(schedule);
                    StateHasChanged(); // 🔑 새로운 결과가 나올 때마다 UI 갱신
                }   
            }
            loading = false;
        }
        */

        private string GetCourseColor(string courseName)
        {
            if (!courseColors.ContainsKey(courseName))
            {
                var rand = new Random(courseName.GetHashCode());
                var hue = rand.Next(0, 360);
                courseColors[courseName] = $"hsl({hue}, 70%, 50%)"; // 예쁜 파스텔 톤
            }
            return courseColors[courseName];
        }
        private async Task GenerateSchedules()
        {
            loading = true;
            generatedSchedules.Clear();
            StateHasChanged(); // "생성 중..." 메시지를 즉시 표시하기 위해 호출

            var selectedCourses = StateService.SelectedCourses.ToList();
            var realtimeFilters = new List<IRealtimeFilter> { new TimeConflictFilter() };
            var finalFilters = new List<IFinalFilter>();
            if (useLunchBreak) realtimeFilters.Add(new LunchBreakFilter());
            if (useMorningFilter) realtimeFilters.Add(new MorningFilter());
            if (useNoFriday) realtimeFilters.Add(new NoDayFilter(CoreDay.금));

            var service = new ScheduleService(
                maxPages: 50,
                realtimeFilters: realtimeFilters,
                finalFilters: finalFilters
            );

            // Task.Run을 사용하여 시간표 생성 로직을 백그라운드 스레드에서 실행
            await Task.Run(async () =>
            {
                // IAsyncEnumerable을 사용하여 비동기적으로 스케줄을 받음
                await foreach (var schedule in service.GenerateSchedulesAsync(selectedCourses))
                {
                    // InvokeAsync를 사용하여 UI 스레드에서 안전하게 상태를 업데이트
                    await InvokeAsync(() =>
                    {
                        generatedSchedules.Add(schedule);
                        StateHasChanged(); // 결과가 나올 때마다 UI를 즉시 갱신
                    });
                }

                // 모든 작업이 끝난 후, 다시 InvokeAsync를 통해 loading 상태를 변경
                await InvokeAsync(() =>
                {
                    loading = false;
                    StateHasChanged();
                });
            });
        }
    }