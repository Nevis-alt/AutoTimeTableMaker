@page "/timetable"
@using WebASMTimeTabler.Core
@inject ScheduleStateService StateService
@inject ScheduleService ScheduleService

<PageTitle>시간표</PageTitle>

<h1>생성된 시간표</h1>

@if (generatedSchedules.Count == 0 && loading)
{
    <p><em>시간표 생성 중...</em></p>
}
else if (generatedSchedules.Count == 0 && !loading)
{
    <p><em>시간표가 없습니다.</em></p>
}
else
{
    @foreach (var (schedule, idx) in generatedSchedules.Select((s, i) => (s, i + 1)))
    {
        <div class="card my-3 p-3">
            <h5>시간표 @idx</h5>
            <table class="table table-bordered text-center align-middle" style="width: 100%; table-layout: fixed;">
                <thead class="table-light">
                    <tr>
                        <th style="width: 80px;">시간</th>
                        @foreach (var day in DaysOfWeek)
                        {
                            <th>@day</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @for (int hour = StartHour; hour <= EndHour; hour++)
                    {
                        <tr>
                            <td>@(hour+7):00</td>
                            @foreach (var day in DaysOfWeek)
                            {
                                var courseSlot = schedule
                                    .SelectMany(c => c.Times.Select(t => (Course: c, Time: t)))
                                    .FirstOrDefault(x => x.Time.day.ToString() == day && x.Time.start == hour);

                                if (courseSlot.Course != null)
                                {
                                    var color = GetCourseColor(courseSlot.Course.Name);

                                    <td rowspan="@(courseSlot.Time.end - courseSlot.Time.start + 1)" 
                                        style="background-color:@color; color:white; font-weight:bold;">
                                        @courseSlot.Course.Name <br />
                                        <small>@courseSlot.Course.Professor</small>
                                    </td>
                                }
                                else if (!schedule.SelectMany(c => c.Times)
                                                  .Any(t => t.day.ToString() == day && t.start < hour && t.end >= hour))
                                {
                                    <td></td>
                                }
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
}

@code {
    private List<List<Course>> generatedSchedules = new();

    private static readonly string[] DaysOfWeek = { "월", "화", "수", "목", "금", "토" };
    private const int StartHour = 1;
    private const int EndHour = 17;
    private bool loading = true;

    // 랜덤 색상 저장용
    private Dictionary<string, string> courseColors = new();

    protected override async Task OnInitializedAsync()
    {
        var selected = StateService.SelectedCourses.ToList();
        if (selected.Any())
        {
            await foreach (var schedule in ScheduleService.GenerateSchedulesAsync(selected))
            {
                generatedSchedules.Add(schedule);
                StateHasChanged(); // 🔑 새로운 결과가 나올 때마다 UI 갱신
            }
        }
        loading = false;
    }

    private string GetCourseColor(string courseName)
    {
        if (!courseColors.ContainsKey(courseName))
        {
            var rand = new Random(courseName.GetHashCode());
            var hue = rand.Next(0, 360);
            courseColors[courseName] = $"hsl({hue}, 70%, 50%)"; // 예쁜 파스텔 톤
        }
        return courseColors[courseName];
    }
}