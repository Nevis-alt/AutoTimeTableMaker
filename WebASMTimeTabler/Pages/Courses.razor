@page "/courses"
@inject HttpClient Http

<PageTitle>강의 목록</PageTitle>


<h1>강의 목록</h1>

<p>전체 강의 목록입니다.</p>

<div class="mb-3">
    <input type="text" class="form-control" placeholder="과목명, 교수명, 과목번호로 검색" @bind="SearchTerm" @bind:event="oninput" />

</div>
@if (courses == null)
{
    <p><em>Loading...</em></p>
}
else
{   
    <div class="mb-2">
        <button class="btn btn-sm btn-secondary" @onclick="SelectAllFiltered">현재 목록 전체 선택</button>
        <button class="btn btn-sm btn-secondary" @onclick="DeselectAllFiltered">현재 목록 전체 해제</button>
    </div>
    <h3 class="mt-4 d-flex justify-content-between align-items-center">
        선택된 과목 목록
        <button class="btn btn-sm btn-link" @onclick="ToggleSelectedCourses">
            @(showSelectedCourses ? "▲ 접기" : "▼ 펼치기")
        </button>
    </h3>

    @if (showSelectedCourses)
    {
        @if (selectedCourses.Count == 0)
        {
            <p><em>선택된 과목이 없습니다.</em></p>
        }
        else
        {
            <ul class="list-group">
                @foreach (var course in selectedCourses)
                {
                    <li @key="course.ClassNumber" class="list-group-item d-flex justify-content-between align-items-center">
                        <span>@course.Name (@course.Professor)</span>
                        <button class="btn btn-sm btn-danger" @onclick="() => RemoveCourse(course)">제거</button>
                    </li>
                }
            </ul>
        }
    }
    <table class="table" style="table-layout: fixed; width: 100%;">
        <thead>
            <tr>
                <th style="width: 4%;">선택</th>
                <th style="width: 4%; min-width: 30px;">학년</th>
                <th style="width: 4%; min-width: 30px;">학점</th>
                <th style="width: 8%; min-width: 60px;">학수번호</th>
                <th style="width: 8%; min-width: 60px;">교과번호</th>
                <th style="width: 7%; min-width: 60px;">이수구분</th>
                <th style="width: 7%; min-width: 60px;">과목번호</th>
                <th style="width: 25%; min-width: 120px;">시간</th>
                <th style="width: 23%; min-width: 120px;">교과목명</th>
                <th style="width: 5%; min-width: 50px;">교수명</th>
                <th style="width: 5%; min-width: 60px;">교과시간</th>
            </tr>
        </thead>
        <tbody>
            <!-- 가상화 컴포넌트로 변경, 이놈이 자동으로 foreach 수행해주고 보이는 부분만 자동으로 렌더링해서 바로 뜨게 해줌 굿~ -->
            <!-- 근데 스크롤 할때마다 레전드 버벅거려서 그냥 처음 50개 정도만 로딩하고 나머지는 백그라운드에서 천천히 로딩하게 바꿈 -->
            @foreach(var course in displayedCourses) //@key="course.ClassNumber"
            {  
                <tr class="@GetSelectedClass(course)">
                        <td>
                            <input type="checkbox" checked="@IsSelected(course)" @onclick="() => ToggleCourse(course)" />
                        </td>
                    <td>@course.Grade</td>
                    <td>@course.Credit</td>
                    <td>@course.CourseID</td>
                    <td>@course.CourseNumber</td>
                    <td>@course.Division</td>
                    <td>@course.ClassNumber</td>
                    <td>@string.Join(", ", course.Times)</td>
                    <td>@course.Name</td>
                    <td>
                        @if (course.Professor.Contains(","))
                        {
                            <span @onclick="() => ToggleProfessorPopup(course)" style="cursor:pointer; text-decoration:underline; color:blue;">
                                @course.Professor.Split(',')[0] <span style="font-size:0.8em;">외</span>
                            </span>
                            @if (showProfessorPopup && popupCourse == course)
                            {
                                <div style="position:absolute; background:#fff; border:1px solid #ccc; padding:8px; z-index:1000; box-shadow:0 2px 8px #0002;" @onclick:stopPropagation="true">
                                    <strong>전체 교수명:</strong><br />
                                    @foreach (var prof in course.Professor.Split(','))
                                    {
                                        <div>@prof.Trim()</div>
                                    }
                                    <button class="btn btn-sm btn-secondary mt-2" @onclick="CloseProfessorPopup">닫기</button>
                                </div>
                            }
                        }
                        else
                        {
                            @course.Professor
                        }
                    </td>
                    <td>@course.Time</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    
    private Course[]? courses;

    //검색 기능 및 필터링
    private string searchTerm = string.Empty;

    private IEnumerable<Course> filteredCourses = Array.Empty<Course>();
    private List<Course> displayedCourses = new List<Course>();
    private const int batchSize = 50;
    private string SearchTerm
    {
        get => searchTerm;
        set
        {
            searchTerm = value ?? string.Empty;
            ApplyFilter();
        }
    }

    private void ApplyFilter()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(SearchTerm))
            {
                filteredCourses = courses ?? Array.Empty<Course>();
            }
            else
            {
                filteredCourses = (courses ?? Array.Empty<Course>())
                    .Where(c =>
                        (c.Name?.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                        (c.Professor?.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                        (c.ClassNumber?.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase) ?? false)
                    );
            }

            _ = LoadCoursesIncrementally();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"ApplyFilter error: {ex}");
            //errorMessage = ex.Message;
        }
    }
    //전체선택 및 해제기능
    private bool showSelectedCourses = true;

    private void ToggleSelectedCourses()
    {
        showSelectedCourses = !showSelectedCourses;
    }
    private void SelectAllFiltered()
    {
        selectedCourses.UnionWith(filteredCourses);
        StateHasChanged();
    }

    private void DeselectAllFiltered()
    {
        selectedCourses.ExceptWith(filteredCourses);
        StateHasChanged();
    }
    private void ToggleSelection(Course course)
    {
        if (IsSelected(course))
        {
            selectedCourses.Remove(course);
        }
        else
        {   
            selectedCourses.Add(course);
        }
    }

    private void RemoveCourse(Course course)
    {
        selectedCourses.Remove(course);
        StateHasChanged();
    }

    // Course 비교용 클래스 (ClassNumber 기준)
    private class CourseComparer : IEqualityComparer<Course>
    {
        public bool Equals(Course? x, Course? y)
        {
            if (x is null || y is null) return false;
            return x.ClassNumber == y.ClassNumber;
        }

        public int GetHashCode(Course obj)
        {
            return obj.ClassNumber?.GetHashCode() ?? 0;
        }
    }

    // 교수 팝업 상태 관리
    private bool showProfessorPopup = false;
    private Course? popupCourse = null;

    private void ToggleProfessorPopup(Course course)
    {
        if (showProfessorPopup && popupCourse == course)
        {
            showProfessorPopup = false; 
            popupCourse = null;
        }
        else
        {
            showProfessorPopup = true;
            popupCourse = course;
        }
        //StateHasChanged();
    }

    private void CloseProfessorPopup()
    {
        showProfessorPopup = false;
        popupCourse = null;
        //StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        courses = await Http.GetFromJsonAsync<Course[]>("sample-data/courses.json");
        ApplyFilter();
        //filteredCourses = (courses ?? Array.Empty<Course>()).ToList(); // 최초 로딩 시 전체
    }
    private HashSet<Course> selectedCourses = new HashSet<Course>(new CourseComparer());
    private void ToggleCourse(Course course)
    {
        if (!selectedCourses.Add(course)) // 이미 있으면 제거
            selectedCourses.Remove(course);

        StateHasChanged();
    }

    private bool IsSelected(Course course) => selectedCourses.Contains(course);
    private string GetSelectedClass(Course course) => IsSelected(course) ? "table-primary" : "";
    private async Task LoadCoursesIncrementally()
    {
        displayedCourses.Clear();
        try
        {
            //if (filteredCourses == null)
            //    filteredCourses = Array.Empty<Course>();
            var uniqueCourses = filteredCourses
            .GroupBy(c => c.ClassNumber)
            .Select(g => g.First())
            .ToList();

            int index = 0;
            while (index < uniqueCourses.Count())
            {
                var batch = uniqueCourses.Skip(index).Take(batchSize).ToList();
                displayedCourses.AddRange(batch);
                index += batch.Count;

                StateHasChanged(); // UI 갱신
                await Task.Delay(10);
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"LoadCoursesIncrementally error: {ex}");
        }
    }


    public class CourseTime
    {
        public DayOfWeek day { get; init; }
        public string Room { get; init; } = string.Empty;
        public int start { get; init; }
        public int end { get; init; }

        public override string ToString()
        {
            string[] koreanDays = { "월", "화", "수", "목", "금", "토", "일" };
            string dayStr;
            int intDay = (int)day;
            if (intDay == -1)
            {
                return "(e러닝)";
            }
            else if (intDay >= 0 && intDay <= 6)
            {
                // 0=월, 1=화, ..., 6=일로 출력
                dayStr = koreanDays[intDay];
            }
            else
            {
                dayStr = "알수없음";
            }
            return $"({dayStr}, {Room}, {start}-{end})";
        }
    }
    public class Course
    {
        public int Grade { get; init; }            // 학년
        public int Credit { get; init; }           // 학점
        public required string CourseID { get; init; }  // 학수번호
        public required string CourseNumber { get; init; }  // 교과번호
        public required string Division { get; init; }        // 이수구분
        public required string ClassNumber { get; init; }            // 과목번호
        public IReadOnlyList<CourseTime> Times { get; init; } = new List<CourseTime>(); // 시간 (요일, 강의실, 시작시간, 종료시간)
        public required string Name { get; init; }              // 교과목명
        public required string Professor { get; init; }         // 교수명 (여러 명일 경우 ,로 구분)
        public required string Time { get; init; }
        public override string ToString()
        {
            return $"{CourseID} {Name} ({Credit}학점) - {Professor} {string.Join(", ", Times)}";
        }
    }
}
