@page "/courses"
@using WebASMTimeTabler.Models
@using WebASMTimeTabler.Shared
@inject HttpClient Http

<PageTitle>강의 목록</PageTitle>


<h1>강의 목록</h1>

<p>전체 강의 목록입니다.</p>

<div class="mb-3">
    <input type="text" 
            class="form-control" 
            placeholder="과목명, 교수명, 과목번호로 검색" 
            value="@searchTerm" 
            @oninput="OnSearchTermChanged" />

</div>
@if (courses == null)
{
    <p><em>Loading...</em></p>
}
else
{   
    <div class="mb-2">
        <button class="btn btn-sm btn-secondary" @onclick="SelectAllFiltered">현재 목록 전체 선택</button>
        <button class="btn btn-sm btn-secondary" @onclick="DeselectAllFiltered">현재 목록 전체 해제</button>
    </div>
    <h3 class="mt-4 d-flex justify-content-between align-items-center">
        선택된 과목 목록
        <button class="btn btn-sm btn-link" @onclick="ToggleSelectedCourses">
            @(showSelectedCourses ? "▲ 접기" : "▼ 펼치기")
        </button>
    </h3>

    @if (showSelectedCourses)
    {
        @if (selectedCourses.Count == 0)
        {
            <p><em>선택된 과목이 없습니다.</em></p>
        }
        else
        {
            <ul class="list-group">
                @foreach (var course in selectedCourses)
                {
                    <li @key="course.ClassNumber" class="list-group-item d-flex justify-content-between align-items-center">
                        <span>@course.Name (@course.Professor)</span>
                        <button class="btn btn-sm btn-danger" @onclick="() => RemoveCourse(course)">제거</button>
                    </li>
                }
            </ul>
        }
    }
    <table class="table" style="table-layout: fixed; width: 100%;">
        <thead>
            <tr>
                <th style="width: 4%;">선택</th>
                <th style="width: 4%; min-width: 30px;">학년</th>
                <th style="width: 4%; min-width: 30px;">학점</th>
                <th style="width: 8%; min-width: 60px;">학수번호</th>
                <th style="width: 8%; min-width: 60px;">교과번호</th>
                <th style="width: 7%; min-width: 60px;">이수구분</th>
                <th style="width: 7%; min-width: 60px;">과목번호</th>
                <th style="width: 25%; min-width: 120px;">시간</th>
                <th style="width: 23%; min-width: 120px;">교과목명</th>
                <th style="width: 5%; min-width: 50px;">교수명</th>
                <th style="width: 5%; min-width: 60px;">교과시간</th>
            </tr>
        </thead>
        <tbody>
            <!-- 가상화 컴포넌트로 변경, 이놈이 자동으로 foreach 수행해주고 보이는 부분만 자동으로 렌더링해서 바로 뜨게 해줌 굿~ -->
            <!-- 근데 스크롤 할때마다 레전드 버벅거려서 그냥 처음 50개 정도만 로딩하고 나머지는 백그라운드에서 천천히 로딩하게 바꿈 -->
            <Virtualize Items="@filteredCourses" Context="course" ItemSize="53" OverscanCount="50">
                <CourseItem @key="course.ClassNumber" Course="course" IsSelected="IsSelected(course)" OnToggleSelection="ToggleCourse" />
            </Virtualize>
            
            
        </tbody>
    </table>
}

@code {

    
    private Course[]? courses;


    //검색 기능 및 필터링
    private string searchTerm = string.Empty;

    private IList<Course> filteredCourses = new List<Course>();
    //private List<Course> displayedCourses = new List<Course>();
    private const int batchSize = 50;
    private async Task OnSearchTermChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        //await ApplyFilter();
        await Task.Run(() => ApplyFilter());
    }
    private void ApplyFilter()
    {
        /*
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredCourses = courses ?? Array.Empty<Course>();
        }
        else
        {
            filteredCourses = (courses ?? Array.Empty<Course>())
                .Where(c =>
                    (c.Name?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                    (c.Professor?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                    (c.ClassNumber?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false)
                )
                .ToList();
        }
        */
        filteredCourses.Clear();

        var list = string.IsNullOrWhiteSpace(searchTerm)
            ? courses ?? Array.Empty<Course>()
            : (courses ?? Array.Empty<Course>()).Where(c =>
                (c.Name?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (c.Professor?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (c.ClassNumber?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false));

        foreach (var c in list)
            filteredCourses.Add(c);

        StateHasChanged();
    }
    /*
    private async Task ApplyFilter()
    {
        // 이전 작업이 있다면 취소
        cts.Cancel();
        cts.Dispose();
        cts = new CancellationTokenSource();

        // 새 작업 시작
        try
        {
            if (string.IsNullOrWhiteSpace(searchTerm))
            {
                filteredCourses = courses ?? Array.Empty<Course>();
            }
            else
            {
                filteredCourses = (courses ?? Array.Empty<Course>())
                    .Where(c =>
                        (c.Name?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                        (c.Professor?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                        (c.ClassNumber?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false)
                    ).ToList(); // ToList()를 추가하면 Linq 쿼리가 즉시 실행되어 여러번 호출되지 않습니다.
            }
            await LoadCoursesIncrementally(cts.Token);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"ApplyFilter error: {ex}");
        }
    }
    */
    // 고속 검색어 추가&삭제 시 오류 발생하는 문제 해결용
    private CancellationTokenSource cts = new CancellationTokenSource();


    //전체선택 및 해제기능
    private bool showSelectedCourses = true;

    private void ToggleSelectedCourses()
    {
        showSelectedCourses = !showSelectedCourses;
    }
    private void SelectAllFiltered()
    {
        selectedCourses.UnionWith(filteredCourses);
        StateHasChanged();
    }

    private void DeselectAllFiltered()
    {
        selectedCourses.ExceptWith(filteredCourses);
        StateHasChanged();
    }

    private void RemoveCourse(Course course)
    {
        selectedCourses.Remove(course);
        StateHasChanged();
    }
    // 컴포넌트 종료 시 취소 토큰 소스 해제
    public void Dispose()
    {
        cts?.Cancel();
        cts?.Dispose();
    }

    protected override async Task OnInitializedAsync()
    {
        // courses가 null일 때만 데이터를 로드 (최초 1회)
        if (courses == null)
        {
            try
            {
                courses = await Http.GetFromJsonAsync<Course[]>("sample-data/courses.json");
                //await ApplyFilter();
                ApplyFilter();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error loading courses: {ex.Message}");
                // 로딩 실패 시 사용자에게 알리는 UI 로직 추가 가능
            }
        }
        else
        {
            // 이미 로딩된 데이터가 있다면 필터만 다시 적용
            //await ApplyFilter();
            ApplyFilter();
        }
    }

    private HashSet<Course> selectedCourses = new HashSet<Course>(new CourseComparer());
    private void ToggleCourse(Course course)
    {
        if (!selectedCourses.Add(course)) // 이미 있으면 제거
            selectedCourses.Remove(course);

        StateHasChanged();
    }

    private bool IsSelected(Course course) => selectedCourses.Contains(course);
    /*
    private async Task LoadCoursesIncrementally(CancellationToken cancellationToken)
    {
        displayedCourses.Clear();
        try
        {
            //if (filteredCourses == null)
            //    filteredCourses = Array.Empty<Course>();

            

            int index = 0;
            while (index < filteredCourses.Count())
            {
                // 취소 요청이 있었는지 확인
                if (cancellationToken.IsCancellationRequested)
                {
                    return;
                }
                var batch = filteredCourses.Skip(index).Take(batchSize).ToList();
                displayedCourses.AddRange(batch);
                index += batch.Count;

                StateHasChanged(); // UI 갱신
                await Task.Delay(10, cancellationToken); // 지연 시간도 취소 가능하도록 +  지연 시간을 두어서 성능 부하 완화
            }
        }
        catch (OperationCanceledException)
        {
            // 작업이 취소된 경우 무시
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"LoadCoursesIncrementally error: {ex}");
        }
    }
    */
    /*
                @foreach(var course in displayedCourses)
            {  
                <CourseItem Course="course" IsSelected="IsSelected(course)" OnToggleSelection="ToggleCourse" />
            }
    */
}