@page "/courses"
@using WebASMTimeTabler.Core
@using WebASMTimeTabler.ComponentPages
@inject HttpClient Http
@inject NavigationManager NavManager
@inject ScheduleStateService StateService

<PageTitle>강의 목록</PageTitle>


<h1>강의 목록</h1>

<p>전체 강의 목록입니다.</p>

<div class="mb-3">
    <input type="text" 
            class="form-control" 
            placeholder="과목명, 교수명, 과목번호로 검색" 
            value="@searchTerm" 
            @oninput="OnSearchTermChanged" />

</div>
@if (courses == null)
{
    <p><em>Loading...</em></p>
}
else
{   
    <div class="mb-2">
        <button class="btn btn-sm btn-secondary" @onclick="SelectAllFiltered">현재 목록 전체 선택</button>
        <button class="btn btn-sm btn-secondary" @onclick="DeselectAllFiltered">현재 목록 전체 해제</button>
    </div>
    <h3 class="mt-4 d-flex align-items-center">
        <span>선택된 과목 @(StateService.SelectedCourses.Count)개</span>
        <button class="btn btn-sm btn-link ms-2" @onclick="ToggleSelectedCourses">
            @(showSelectedCourses ? "▲ 접기" : "▼ 펼치기")
        </button>
        <button class="btn btn-primary" @onclick="GoToTimetable">시간표 생성</button>
    </h3>

    @if (showSelectedCourses)
    {
        @if (StateService.SelectedCourses.Count == 0)
        {
            <p><em>선택된 과목이 없습니다.</em></p>
        }
        else
        {
            <ul class="list-group">
                @foreach (var course in StateService.SelectedCourses)
                {
                    <li @key="course.ClassNumber" class="list-group-item d-flex justify-content-between align-items-center">
                        <span>@course.Name (@course.Professor)</span>
                        <button class="btn btn-sm btn-danger" @onclick="() => RemoveCourse(course)">제거</button>
                    </li>
                }
            </ul>
        }
    }
    <table class="table" style="table-layout: fixed; width: 100%;">
        <thead>
            <tr>
                <th style="width: 4%;">선택</th>
                <th style="width: 4%; min-width: 30px;">학년</th>
                <th style="width: 4%; min-width: 30px;">학점</th>
                <th style="width: 8%; min-width: 60px;">학수번호</th>
                <th style="width: 8%; min-width: 60px;">교과번호</th>
                <th style="width: 7%; min-width: 60px;">이수구분</th>
                <th style="width: 7%; min-width: 60px;">과목번호</th>
                <th style="width: 25%; min-width: 120px;">시간</th>
                <th style="width: 23%; min-width: 120px;">교과목명</th>
                <th style="width: 5%; min-width: 50px;">교수명</th>
                <th style="width: 5%; min-width: 60px;">교과시간</th>
            </tr>
        </thead>
        <tbody>
            <!-- 가상화 컴포넌트, 이놈이 자동으로 foreach 수행하고 보이는 부분만 렌더링함. OverscanCount 넉넉하게 잡아야 버벅거림 적음-->
            <Virtualize Items="@filteredCourses" Context="course" ItemSize="53" OverscanCount="50">
                <CourseItem @key="course.ClassNumber" Course="course" IsSelected="IsSelected(course)" OnToggleSelection="ToggleCourse" />
            </Virtualize>
            
            
        </tbody>
    </table>
}

@code {

    
    private Course[]? courses;
    private bool debounceFlag = true;

    //검색 기능 및 필터링
    private string searchTerm = string.Empty;

    private IList<Course> filteredCourses = new List<Course>();
    private const int batchSize = 50;
    private async Task OnSearchTermChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;

        bool currentFlag = debounceFlag = !debounceFlag; // true/false 번갈아 저장
        await Task.Delay(100); // 300ms 대기

        if (currentFlag == debounceFlag) // 최신 입력만 반영
        {
            await Task.Run(() => ApplyFilter());
        }
    }
    private void ApplyFilter()
    {
        filteredCourses.Clear();

        var list = string.IsNullOrWhiteSpace(searchTerm)
            ? courses ?? Array.Empty<Course>()
            : (courses ?? Array.Empty<Course>()).Where(c =>
                (c.Name?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (c.Professor?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (c.ClassNumber?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false));

        foreach (var c in list)
            filteredCourses.Add(c);

        StateHasChanged();
    }

    //전체선택 및 해제기능
    private bool showSelectedCourses = false;

    private void ToggleSelectedCourses()
    {
        showSelectedCourses = !showSelectedCourses;
    }
    private void SelectAllFiltered()
    {
        foreach (var c in filteredCourses)
            if(!StateService.IsSelected(c)) StateService.SelectedCourses.Add(c);
        //selectedCourses.UnionWith(filteredCourses);
        StateHasChanged();
    }

    private void DeselectAllFiltered()
    {
        foreach(var course in filteredCourses)
            if(StateService.IsSelected(course)) StateService.SelectedCourses.Remove(course);
        //selectedCourses.ExceptWith(filteredCourses);
        StateHasChanged();
    }

    private void RemoveCourse(Course course)
    {
        StateService.SelectedCourses.Remove(course);
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        // courses가 null일 때만 데이터를 로드 (최초 1회)
        if (courses == null)
        {
            try
            {
                courses = await Http.GetFromJsonAsync<Course[]>("sample-data/courses.json");
                ApplyFilter();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error loading courses: {ex.Message}");
                // 로딩 실패 시 사용자에게 알리는 UI 로직 추가 가능
            }
        }
        else
        {
            // 이미 로딩된 데이터가 있다면 필터만 다시 적용
            ApplyFilter();
        }
    }

    //private HashSet<Course> selectedCourses = new HashSet<Course>(new CourseComparer());
    private void ToggleCourse(Course course)
    {
        StateService.ToggleCourse(course);
        StateHasChanged();
    }

    private bool IsSelected(Course course) => StateService.SelectedCourses.Contains(course);

    private void GoToTimetable()
    {
        //StateService.SetSelectedCourses(selectedCourses.ToList());
        NavManager.NavigateTo("/timetable");
    }
}